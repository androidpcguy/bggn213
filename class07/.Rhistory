knitr::opts_chunk$set(echo = TRUE)
source('http://tinyurl.com/rescale-R')
source('http://tinyurl.com/rescale-R')
print('hi')
rescale(1:10)
source('http://tinyurl.com/rescale-R')
source('http://tinyurl.com/rescale-R')
source('http://tinyurl.com/rescale-R')
rescale(1:10)
rescale(1:10)
rescale(1:10)
print('hi')
rescale(1:10)
rescale(1:10)
print('hi')
rescale(1:10)
rescale(1:10)
print('hi')
rescale(1:10)
print('hi')
x <- c(1:10, 'foobar')
!is.numeric(x)
rescale(x)
x <- c(1:10, 'foobar')
!is.numeric(x)
rescale2(x)
x <- c(1:10, 'foobar')
is.numeric(x)
rescale2(x)
x <- c(1,2,NA, 3, NA)
y <- c(NA,3,NA,3,4)
is.na(x)
is.na(y)
is.na(x)
is.na(y)
is.na(x) & is.na(y)
is.na(x) & is.na(y) # this gives true when both are NA
both.na <- is.na(x) & is.na(y) # this gives true when both are NA
where(both.na)
both.na <- is.na(x) & is.na(y) # this gives true when both are NA
which(both.na)
both.na <- is.na(x) & is.na(y) # this gives true when both are NA
which(both.na) # index of true
print(paste('There are', sum(both.na), 'instances when both vectors are NA'))
both.na <- function(vec1, vec2) {
sum(is.na(vec1) & is.na(vec2))
}
both.na(x,y)
both.na(rep(NA, 5), rep(NA, 1))
?rp
?rep
both.na(rep(NA, 5), c(rep(NA, 4), 3))
x <- rep(NA, 5)
y <- rep(NA, 3)
length(x) != length(y)
knitr::opts_chunk$set(echo = TRUE)
source('http://tinyurl.com/rescale-R')
x <- c(1:10, 'foobar')
is.numeric(x)
rescale2(x)
knitr::opts_chunk$set(echo = TRUE)
source('http://tinyurl.com/rescale-R')
x <- c(1:10, 'foobar')
is.numeric(x)
#rescale2(x)
x <- c(1,2,NA, 3, NA)
y <- c(NA,3,NA,3,4)
is.na(x)
is.na(y)
both.na <- is.na(x) & is.na(y) # this gives true when both are NA
which(both.na) # index of true
print(paste('There are', sum(both.na), 'instances when both vectors are NA'))
both.na <- function(vec1, vec2) {
sum(is.na(vec1) & is.na(vec2))
}
both.na(x,y)
both.na(rep(NA, 5), c(rep(NA, 4), 3))
both.na(rep(NA, 5), rep(NA,2))
x <- rep(NA, 5)
y <- rep(NA, 3)
length(x) != length(y) # check if lengths NOT equal
View(rescale2)
x <- c(1,2,NA, 3, NA)
y <- c(NA,3,NA,3,4)
both_na3(x, y)
both_na3
?which
source('grade.R')
student1 <- c(rep(100, 9), 90)
grade(student1)
source('grade.R')
student1 <- c(rep(100, 9), 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
grade(student1)
grade(student2)
?min
source('grade.R')
source('grade.R')
student1 <- c(rep(100, 9), 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
grade(student1)
grade(student2)
source('grade.R')
student1 <- c(rep(100, 9), 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
summary(grade(student1))
summary(grade(student2)) # hooray, both work!
source('grade.R')
student1 <- c(rep(100, 9), 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
print('Student 1...')
summary(grade(student1))
print('Student 2...')
summary(grade(student2)) # hooray, both work!
source('grade.R')
student1 <- c(rep(100, 7), 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
print('Student 1...')
summary(grade(student1))
print('Student 2...')
summary(grade(student2)) # hooray, both work!
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url)
all.grades
as.list(all.grades)
as.vector(all.grades)
all.grades[[1,]]
all.grades[1,]
as.list(all.grades[1,])
unlist(as.list(all.grades[1,]))
unlist(as.list(all.grades[1,]))[2:]
unlist(as.list(all.grades[1,]))[2:ncol(all.grades)]
as.vector(as.list(all.grades[1,]))[2:ncol(all.grades)]
unlist(as.vector(as.list(all.grades[1,])))[2:ncol(all.grades)]
unlist(as.vector(as.list(all.grades[1,])))
unlist(as.vector(as.list(all.grades[1,])))[2:ncol(all.grades)]
unlist(student)[2:ncol(all.grades)]
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url)
for (student in rows(all.grades)) {
unlist(student)[2:ncol(all.grades)]
}
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url)
for (student in rows(all.grades)) {
unlist(student)[2:ncol(all.grades)]
}
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url)
for (student in rows(all.grades)) {
print(unlist(student)[2:ncol(all.grades)])
}
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url)
for (student in rows(all.grades)) {
print(mean(grade(unlist(student)[2:ncol(all.grades)])))
}
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url)
for (student in rows(all.grades)) {
print(paste(student$X, ":", mean(grade(unlist(student)[2:ncol(all.grades)]))))
}
apply(all.grades, MARGIN = 1, FUN = grade)
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url, row.names = 1)
apply(all.grades, MARGIN = 1, FUN = grade)
final.mean.grades <- apply(final.grades, 1, mean)
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url, row.names = 1)
final.grades <- apply(all.grades, MARGIN = 1, FUN = grade)
final.mean.grades <- apply(final.grades, 1, mean)
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url, row.names = 1)
final.grades <- apply(all.grades, MARGIN = 1, FUN = grade)
final.mean.grades <- apply(final.grades, 1, mean)
final.mean.grades
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url, row.names = 1)
final.grades <- apply(all.grades, MARGIN = 1, FUN = grade)
final.mean.grades <- apply(final.grades, 0, mean)
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
url <- "https://tinyurl.com/gradeinput"
all.grades <- read.csv(url, row.names = 1)
final.grades <- apply(all.grades, MARGIN = 1, FUN = grade)
final.mean.grades <- apply(final.grades,2, mean)
final.mean.grades
sort(final.mean.grades, decreasing = T)
df1
df2
x <- df1$IDs
y <- df2$IDs
x <- df1$IDs
y <- df2$IDs
intersect(x, y)
View(df1)
View(df2)
x %in% y
x[x %in% y]
y[y %in% x]
x[y %in% x]
d[y %in% x]
y[y %in% x]
cbind(x[x %in% y],
y[y %in% x])
cbind(x[x %in% y],
y[y %in% x])
gene_intersect(x,y)
cbind(x[x %in% y],
y[y %in% x])
gene_intersect4(x,y)
cbind(x[x %in% y],
y[y %in% x])
gene_intersect(x,y)
cbind(x[x %in% y],
y[y %in% x])
gene_intersect2(x,y)
cbind(x[x %in% y],
y[y %in% x])
gene_intersect2(df1, df2)
merge(df1, df2, by='IDs')
install.packages('BiocManager')
BiocManager::install
BiocManager::install()
BiocManager::install()
install.packages('BiocManager')
install.packages("BiocManager")
BiocManager::install()
install.packages("BiocManager")
BiocManager::install()
BiocManager::install()
source('~/Documents/bggn213/class07/shiny.R')
install.packages('shiny')
source('~/Documents/bggn213/class07/shiny.R')
ui
knitr::opts_chunk$set(echo = TRUE)
source('shiny.R')
source('shiny.R')
source('shiny.R')
ui
runApp(source('shiny.R'))
source('~/Documents/bggn213/class07/shiny.R')
source('~/Documents/bggn213/class07/shiny.R')
source('~/Documents/bggn213/class07/shiny.R')
runApp(source('shiny.R'))
source('shiny.R')
source('~/Documents/bggn213/class07/shiny.R')
source('~/Documents/bggn213/class07/shiny.R')
runApp('shiny.R')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
runApp('shiny.R')
exit
quit()
runApp('shiny.R')
install.packages('rsconnect')
runApp('shiny.R')
library(rsconnect)
runApp('shiny.R')
source("class05.R")
source("class05_2.R")
source("class05_3.R")
getwd()
